package com.walmart.GraphQL.Services;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.walmart.GraphQL.Request.CreateStudentRequest;
import com.walmart.GraphQL.Response.StudentResponse;

import graphql.kickstart.spring.webclient.boot.GraphQLRequest;
import graphql.kickstart.spring.webclient.boot.GraphQLResponse;
import graphql.kickstart.spring.webclient.boot.GraphQLWebClient;

@Service
public class ClientService {

	@Autowired
	GraphQLWebClient graphQLWebClient;

	public StudentResponse getStudent(Integer id) {
		Map<String, Object> variables = new HashMap<>();
		variables.put("id", id);

		String queryStr = "query student($id : Int) {\r\n" + "  student(id : $id) {\r\n" + "    id\r\n"
				+ "    fullName\r\n" + "    courseId\r\n" + "  } \r\n" + "}";

		GraphQLRequest request = GraphQLRequest.builder().query(queryStr).variables(variables).build();

		GraphQLResponse graphQLResponse = graphQLWebClient.post(request).block();

		return graphQLResponse.get("student", StudentResponse.class);
	}

	public StudentResponse createStudent(CreateStudentRequest createStudentRequest) {

		Map<String, Object> variables = new HashMap<>();
		variables.put("createStudentRequest", createStudentRequest);

		String mutationStr = "mutation createStudent ($createStudentRequest : CreateStudentRequest) {\r\n"
				+ "  createStudent (createStudentRequest : $createStudentRequest) {\r\n" + "    id\r\n"
				+ "    fullName\r\n" + "    courseId\r\n" + "  }\r\n" + "}";

		GraphQLRequest request = GraphQLRequest.builder().query(mutationStr).variables(variables).build();

		GraphQLResponse graphQLResponse = graphQLWebClient.post(request).block();

		return graphQLResponse.get("createStudent", StudentResponse.class);
	}

}
